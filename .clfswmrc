;;; -*- lisp -*-
;;;
;;; CLFSWM configuration file example
;;;
;;; Send me your configuration file at pbrochard _at_ common-lisp -dot- net
;;; if you want to share it with others.

(in-package :clfswm)

(without-capslock)
(without-numlock)
(setf *border-size* 2)
(setf *init-hook* (remove 'display-hello-window *init-hook*))

(defconfig *clfswm-terminal-cmd* (format nil "terminator -T ~A" *clfswm-terminal-name*)
  'Corner "The clfswm terminal command.
This command must set the window title to *clfswm-terminal-name*")

(defmacro add-my-run-or-raise-fn (name class cmd)
  "make a run-or-raise-fn"
  `(defun ,name ()
     (run-or-raise (lambda (win) (string-equal ,class
                                               (xlib:get-wm-class win)))
                   (lambda () (do-shell ,cmd)))))

(defmacro add-my-run-or-raise-fns (&rest rors)
  "make run-or-raise fns, basically saves typing"
  (let ((rs (mapcar #'(lambda (r) (cons 'add-my-run-or-raise-fn r)) rors)))
    `(progn ,@rs)))

(add-my-run-or-raise-fns
 (start-emacs "emacs" "cd $HOME && exec emacs")
 (start-firefox "Navigator" "exec firefox")
 (start-urxvt "urxvt" "cd $HOME && exec urxvt"))

(defun start-dmenu ()
  (do-shell "exec dmenu_run"))

(defun start-xscreenlock ()
    (do-shell "exec xscreensaver-command -lock"))

(defun start-emacsclient ()
  (do-shell "cd $HOME && exec emacsclient -c"))

(defun my-main-keys ()
  (define-keys (main)
    (("w" :mod-4) 'start-firefox)
    (("m" :mod-4) 'start-emacs)
    (("e" :mod-4) 'start-emacsclient)
    (("r" :mod-4) 'start-dmenu)
    (("F12" :mod-4) 'start-xscreenlock)
    (("Return" :mod-4) 'start-urxvt))
  (define-main-key ("h" :mod-4) 'select-next-brother)
  (define-main-key ("l" :mod-4) 'select-previous-brother)
  (define-main-key ("j" :mod-4) 'select-previous-level)
  (define-main-key ("k" :mod-4) 'select-next-level)
  (define-main-key ("t" :mod-4) 'present-clfswm-terminal)
  (define-main-key ("a" :mod-4) 'switch-to-root-frame)
  (dotimes (count 10) 
      (undefine-main-key ((write-to-string count) :mod-1))
      (define-main-key ((write-to-string count) :mod-4) 'bind-or-jump count))
  (undefine-main-key ("f" :mod-1))
  (undefine-main-key ("b" :mod-1)))
(my-main-keys)
(add-hook *binding-hook* 'my-main-keys)

;; (defun my-sec-keys ()
;;   (define-second-key ("e" :mod-1) 'eval-from-query-string)
;;   (define-second-key ("l" :mod-1) (lambda () (load "~/.clfswmrc") (leave-second-mode))))
;;(my-sec-keys)
;; (add-hook *binding-hook* 'my-sec-keys)

;;;; Uncomment the line above if you want to enable the notify event compression.
;;;; This variable may be useful to speed up some slow version of CLX
;;;; It is particulary useful with CLISP/MIT-CLX.
;; (setf *have-to-compress-notify* t)


;;; Color configuration example
;;;
;;; See in package.lisp or config.lisp for all variables
;;(setf *color-unselected* "Blue")


;;; How to change the default fullscreen size
;;(defun get-fullscreen-size ()
;;  "Return the size of root child (values rx ry rw rh)
;;You can tweak this to what you want"
;;  (values -2 -2 (+ (xlib:screen-width *screen*) 2) (- (xlib:screen-height *screen*) 20)))

;;; Contributed code example
;;; See in the clfswm/contrib directory to find some contributed code
;;; and se load-contrib to load them. For example:
;;(load-contrib "contrib-example.lisp")

;;(load-contrib "mpd.lisp")
;;(load-contrib "keyb_fr.lisp")
;;(load-contrib "xmms.lisp")
;;(load-contrib "cd-player.lisp")
;;(load-contrib "reboot-halt.lisp")


;;;; Client/server connection - the connection is crypted and you can only
;;;; connect to the server with the same clfswm binary.
;;(load-contrib "server/server.lisp")
;;(unless (is-started-as-client-p)
;;  (start-server))



;;; Binding example: Undefine Control-F1 and define  Control-F5 as a
;;; new binding in main mode
;;;
;;; See bindings.lisp, bindings-second-mode.lisp for all default bindings definitions.
;;
;;(defun $start-emacs ()
;;  "Run or raise emacs"
;;  (setf *second-mode-leave-function*
;;        (lambda ()
;;          (run-or-raise (lambda (win) (string-equal "emacs"
;;						    (xlib:get-wm-class win)))
;;                        (lambda () (do-shell "cd $HOME && exec emacsclient -c")))))
;;  (leave-second-mode))
;;
;;(defun $start-conkeror ()
;;  "Run or raise conkeror"
;;  (setf *second-mode-leave-function*
;;        (lambda ()
;;          (run-or-raise (lambda (win) (string-equal "Navigator"
;;						    (xlib:get-wm-class win)))
;;                        (lambda () (do-shell "cd $HOME && exec conkeror")))))
;;  (leave-second-mode))
;;
;;(defun binding-example ()
;;  (undefine-main-key ("F1" :mod-1))
;;  (define-main-key ("F5" :mod-1) 'help-on-clfswm)
;;  (define-second-key ("e") '$start-emacs)
;;  (define-second-key ("c") '$start-conkeror)
;;  ;; Binding example for apwal
;;  (define-second-key (#\Space)
;;      (defun tpm-apwal ()
;;	"Run Apwal"
;;	(do-shell "exec apwal")
;;	(show-all-windows-in-workspace (current-workspace))
;;	(throw 'exit-second-loop nil))))
;;
;;(add-hook *binding-hook* 'binding-example)

;;; Set up an UZBL frame where all uzbl windows will be absorbed.
;;;
;; (defun set-uzbl-frame-nw-hook (&optional (frame *current-child*))
;;  "Open the window in the UZBL frame if it match uzbl absorb-nw-test"
;;  (when (frame-p frame)
;;    (setf (frame-nw-hook frame) 'absorb-window-nw-hook
;;          (frame-data-slot frame :nw-absorb-test)  (nw-absorb-test-class "Navigator"))))
;; ;;(frame-data-slot frame :nw-absorb-test)  (nw-absorb-test-class "uzbl-core"))))

;; #-:uzbl-menu-added
;; (add-menu-key 'frame-nw-hook-menu "z" 'set-uzbl-frame-nw-hook)

;; (pushnew :uzbl-menu-added *features*)
;;
;;
;; (defun init-uzbl-frame ()
;;  (let ((frame (first (frame-child *root-frame*))))
;;    (setf (frame-data-slot frame :tile-size) 0.7)
;;    (setf *current-child* frame)
;;    (bind-on-slot 0)
;;    (let ((uzbl-frame (create-frame :name "Firefox" :x 0.01 :y 0.01 :w 0.98 :h 0.98)))
;;      (add-frame uzbl-frame frame)
;;      (set-uzbl-frame-nw-hook uzbl-frame))))

;; (unless (member 'init-uzbl-frame *init-hook*)
;;  (add-hook *init-hook* 'init-uzbl-frame))
;;; End UZBL setup.


;;; A more complex example I use to record my desktop and show
;;; documentation associated to each key press.
;;;See contrib/osd.lisp
;;(load-contrib "osd.lisp")
;;;;; -- Doc example end --



;;;;;;;;;;; Init hook examples:
;;(defun my-init-hook-1 ()
;; (dbg 'my-init-hook)
;; ;;(add-frame (create-frame :name "Default" :layout #'tile-left-layout :data (list '(:tile-size 0.6))) *root-frame*)
;; (add-frame (create-frame :name "The Gimp" :x 0.6 :y 0 :w 0.3 :h 0.2) *root-frame*)
;; (add-frame (create-frame :name "Net" :x 0.52 :y 0.3 :w 0.4 :h 0.3) *root-frame*)
;; (add-frame (create-frame :x 0.4 :y 0 :w 0.2 :h 0.3) (first (frame-child *root-frame*)))
;; (add-frame (create-frame :x 0.6 :y 0.4 :w 0.4 :h 0.2) (first (frame-child *root-frame*)))
;; (add-frame (create-frame :x 0.4 :y 0.7 :w 0.2 :h 0.3) (first (frame-child *root-frame*)))
;; (let ((frame (create-frame :name "The Qiv" :x 0 :y 0.4 :w 0.4 :h 0.2)))
;;   (add-frame frame (first (frame-child *root-frame*)))
;;   (add-frame (create-frame) frame))
;; (add-frame (create-frame :x 0.1 :y 0.55 :w 0.8 :h 0.43) *root-frame*)
;; (add-frame (create-frame :x 0.2 :y 0.1 :w 0.6 :h 0.4) (first (frame-child *root-frame*)))
;; (add-frame (create-frame :x 0.3 :y 0.55 :w 0.4 :h 0.3) (first (frame-child *root-frame*)))
;; (add-frame (create-frame :x 0.1 :y 0.1 :w 0.3 :h 0.6) (first (frame-child (first (frame-child *root-frame*)))))
;; (setf (frame-layout *current-child*) #'tile-layout))
;;
;;(defun my-init-hook-2 ()
;; (dbg 'my-init-hook)
;; (add-frame (create-frame :name "Default" :layout #'tile-left-layout :data (list '(:tile-size 0.6))) *root-frame*)
;; (setf (frame-layout *current-child*) #'tile-layout))
;;
;;
;;(defun my-init-hook-3 ()
;;(dbg 'my-init-hook)
;;(add-frame (create-frame :name "plop" :x 0.1 :y 0.4 :w 0.7 :h 0.3) *root-frame*)
;;(add-frame (create-frame :name "Default" :layout nil :x 0.1 :y 0.5 :w 0.8 :h 0.5)
;;	     *root-frame*)
;;(setf (frame-layout *root-frame*) nil))
;;
;;
;;
;;(defun my-init-hook-4 ()
;;(let ((frame (add-frame (create-frame :name "Default"
;;                                      :layout #'tile-left-layout
;;					:x 0.05 :y 0.05 :w 0.9 :h 0.9)
;;			  *root-frame*)))
;;  (setf *current-child* frame)))
;;;;
;;;;
;;;;;;; Use this hook and prevent yourself to create a new frame to emulate
;;;;;;; the MS Windows desktop style :)
;;(defun my-init-hook-ms-windows-style ()
;; (setf (frame-managed-type *root-frame*) nil))
;;;;
;;;;
;;;;;;; Here is another example useful with the ROX filer: Only the
;;;;;;; root frame fullscreen with some space on the left for icons.
;;(defun my-init-hook-rox-filer ()
;; (setf (frame-layout *root-frame*) #'tile-left-space-layout
;;	(frame-data-slot *root-frame* :tile-size) 0.9))
;;;;
;;;;
;;;;
;;;;
;;(setf *init-hook* '(my-init-hook-3))  ;; <- choose one in 1 to 4,
;;;;                                             my-init-hook-ms-windows-style
;;;;                                             my-init-hook-rox-filer
;;;;(setf *init-hook* nil)
;;;;; Init hook end

;;; For debuging: start another sever (for example: 'startx -- :1'), Xnest
;;; or Zephyr and add the lines above in a dot-clfswmrc-debug file
;;; mod-2 is the numlock key on some keyboards.
;;(setf *default-modifiers* '(:mod-2))
;;
;;(defun my-add-escape ()
;;  (define-main-key ("Escape" :mod-2) 'exit-clfswm))
;;
;;(add-hook *binding-hook* 'my-add-escape)
;;
;;(clfswm:main :display ":1" :alternate-conf #P"/where/is/dot-clfswmrc-debug")
;;; ### End of internal variables definitions ### ;;;
(defun my-init-hook ()
  (dbg 'my-init-hook)
  (setf (frame-data-slot *root-frame* :tile-space-size) 0.01)
  (setf *banish-pointer-placement* 'middle-right-child-placement)
  (setf (frame-layout *root-frame*) #'tile-space-layout
        (frame-data-slot *root-frame* :tile-space-size) 0.05
        (frame-data-slot *root-frame* :tile-layout-keep-position) :yes)
  (setf *default-frame-data* (append (remove '(:fast-layout) *default-frame-data*
					     :test (lambda (x y)
						     (when (and (consp x) (consp y))
						       (equal (car x) (car y)))))
				     '((:fast-layout (tile-space-layout no-layout))))))


(add-hook *init-hook* 'my-init-hook)
